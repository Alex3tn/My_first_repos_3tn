#  Task_one:

# Запрещенные слова
#
# Напишите программу, которая получает на вход строку с названием текстового файла,
# и выводит на экран содержимое этого файла, заменяя все запрещенные слова звездочками *
# (количество звездочек равно количеству букв в слове).
# Запрещенные слова, разделенные символом пробела, хранятся в текстовом файле forbidden_words.txt.
# Все слова в этом файле записаны в нижнем регистре.
# Программа должна заменить запрещенные слова, где бы они ни встречались,
# даже в середине другого слова. Замена производится независимо от регистра: если файл forbidden_words.txt
# содержит запрещенное слово exam, то слова exam, Exam, ExaM, EXAM и exAm должны быть заменены на ****.
# Предположим, что forbidden_words.txt содержит следующие запрещенные слова:
#
# hello email python the exam wor is
#
# А текст файла, подлежащего цензуре, выглядит так:
#
# Hello, world! Python IS the programming language of thE future. My EMAIL is....
# PYTHON is awesome!!!!
#
# Тогда программа должна вывести отредактированный текст в таком виде:
#
# *****, ***ld! ****** ** *** programming language of *** future. My ***** **....
# ****** ** awesome!!!!


with open('forbidden_words.txt', 'w') as f:
	f.write("hello email python the exam wor is")

with open('control line', 'w') as f:
	f.write("Hello, world! Python IS the programming language of thE future. My EMAIL is....PYTHON is awesome!!!!")

with open('forbidden_words.txt') as f:
	forbidden_words = {word: '*' * len(word) for word in f.read().split()}
with open('control line') as f:
	s = f.read()
	s_lower = s.lower()
for forbidden_word in forbidden_words:
	s_lower = s_lower.replace(forbidden_word, forbidden_words[forbidden_word])
print(*map((lambda c1, c2: '*' if c2 == '*' else c1), s, s_lower), sep='')


# Task_two:
# В текстовый файл построчно записаны фамилия и имя учащихся класса и его оценка за контрольную.
# Вывести на экран всех учащихся, чья оценка меньше 3 баллов

with open('class.txt', 'w') as f:
    f.write("Petrov Pyotr 5\n"
            "Ivanov Ivan 2\n"
            "Sidorov Sergey 4\n"
            "Annushkina Anna 3\n")

with open('class.txt') as f:
    for i in f:
        g = int(i[len(i) - 2])
        if g < 3:
            print(i[:-1])


# Task_three:
# В файле могут быть записаны десятичные цифры и все, что угодно.
# Числом назовем последовательность цифр, идущих подряд (т.е. число всегда неотрицательно).
#
# Вычислите сумму всех чисел, записанных в файле. В данной задаче удобно считывать данные посимвольно.
#
# Примеры
# входные данные
#  123
# aaa456
# 1x2y3 4 5 6
#
# выходные данные
# 600

with open('numbers.txt', 'w') as f:
    f.write("123\n"
            "aaa456\n"
            "1x2y3 4 5 6\n")

with open('numbers.txt') as f:
    summa = 0
    for line in f.readlines():
        result_line = ''
        for elem in line:
            result_line += elem if elem.isdigit() else ' '
        summa += sum([int(elem) for elem in result_line.split()])
print(summa)


# Task_four:
# Зашифруйте данный текстовый файл шифром Цезаря, при этом символы первой строки файла должны
# циклически сдвигаться на 1, второй строки — на 2, третьей строки — на три и т.д.
#
# В этой задаче удобно считывать файл построчно, шифруя каждую строку в отдельности.
#
# Входные данные
# В каждой строчке содержатся различные символы. Шифровать нужно только буквы латинского алфавита.
#
# Выходные данные
# Программа должна вывести шифрованные строчки.
#
# Примеры
# входные данные
# Hello
# Hello
# Hello
# Hello
# выходные данные
# Ifmmp
# Jgnnq
# Khoor
# Lipps

with open("text.txt", 'w') as f:
    f.write("Hello\n"
            "Hello\n"
            "Hello\n"
            "Hello\n")

import string
with open('text.txt') as f:
    for delta, text_translate in enumerate(f.readlines(), 1):
        lower = (string.ascii_lowercase[delta:] + string.ascii_lowercase[:delta])
        translate = {ord(a): d for (a, d) in zip(string.ascii_letters, (lower + lower.upper()))}
        result = str.translate(text_translate, translate)
        print(result)


#  Task_five
# В Государственную Думу Федерального Собрания Российской Федерации выборы производятся по партийным спискам.
# Каждый избиратель указывает одну партию, за которую он отдает свой голос.
# В Государственную Думу попадают партии, которые набрали не менее 7% от числа голосов избирателей.
#
# Дан список партий и список голосов избирателей. Выведите список партий, которые попадут в Государственную Думу.
#
# Входные данные
# В первой строке входного файла написано слово PARTIES:. Далее идет список партий, участвующих в выборах.
#
# Затем идет строка, содержащая слово VOTES:.
# За ней идут названия партий, за которые проголосовали избиратели,
# по одному названию в строке. Названия могут быть только строками из первого списка.
#
# Выходные данные
# Программа должна вывести названия партий, получивших не менее 7% от числа голосов в том порядке,
# в котором они следуют в первом списке.
#
# Примеры
# входные данные
# PARTIES:
# Party one
# Party two
# Party three
# VOTES:
# Party one
# Party one
# Party three
# Party one
# Party one
# Party three
# Party two
# Party one
# Party three
# Party three
# Party one
# Party one
# Party three
# Party three
# Party one
# выходные данные
# Party one
# Party three

with open('parties.txt') as f:
    lines = f.readlines()
    lines = filter(None, (line.rstrip() for line in lines))
    d = {}
    s = 0
    b = -1
    for line in lines:
        if line == "PARTIES:":
            pass
        elif line == "VOTES:":
            b = 0
        elif b == -1:
            d[line] = 0
        else:
            s += 1
            d[line] += 1
    for k in d:
        if 7 * s / 100 <= d[k]:
            print(k)


# Task_six
# Z: Гистограмма
#
# Вовочка ломает систему безопасности Пентагона. Для этого ему понадобилось узнать,
# какие символы в секретных зашифрованных посланиях употребляются чаще других.
# Для удобства изучения Вовочка хочет получить графическое представление встречаемости символов.
# Поэтому он хочет построить гистограмму количества символов в сообщении.
# Гистограмма – это график, в котором каждому символу,
# встречающемуся в сообщении хотя бы один раз, соответствует столбик,
# высота которого пропорциональна количеству этих символов в сообщении.
#
# Входной файл содержит зашифрованный текст сообщения.
# Он содержит строчные и прописные латинские буквы, цифры, знаки препинания,
# пробелы и переводы строк. Текст содержит хотя бы один непробельный символ.
# Все строки входного файла не длиннее 200 символов.
#
# Для каждого символа кроме пробелов и переводов строк выведите столбик из символов «#»,
# количество которых должно быть равно количеству символов в данном тексте.
# Под каждым столбиком напишите символ, соответствующий ему.
# Отформатируйте гистограмму так, чтобы нижние концы столбиков были на одной строке,
# первая строка и первый столбец были непустыми.
# Не отделяйте столбики друг от друга.
# Отсортируйте столбики в порядке увеличения кодов символов.
#
# Ввод
# Hello, world!
#
# Вывод
#      #
#      ##
# #########
# !,Hdelorw
#
#
# Ввод
# Twas brillig, and the slithy toves
# Did gyre and gimble in the wabe;
#
# All mimsy were the borogoves,
# And the mome raths outgrabe.
#
# Вывод
#
#          #
#          #
#          #
#          #
#          #
#          #         #
#          #  #      #
#       #  # ###  ####
#       ## ###### ####
#       ##############
#       ##############  ##
# #  #  ############## ###
# ########################
# ,.;ADTabdeghilmnorstuvwy

with open('pentagon.txt', 'w') as f:
    f.write("Hello, world!")

with open('pentagon.txt') as f:
    dict = {}
    mx = 1
    for line in f:
        b = line.split()
        b = ''.join(b)
        line = b
        for c in line:
            if c in dict:
                dict[c] += 1
                mx = max(mx, dict[c])
            else:
                dict[c] = 1
    s = ""
    for i in dict:
        s += i
    s = sorted(s)
    for i in range(mx):
        str = ''
        for i in s:
            if dict[i] >= mx:
                str += '#'
            else:
                str += ' '
        print(str)
        mx -= 1
    print(*s, sep="")


#  Task_seven
# Q: Выборы Государственной Думы
#
# Статья 83 закона “О выборах депутатов Государственной Думы Федерального Собрания Российской Федерации”
# определяет следующий алгоритм пропорционального распределения мест в парламенте.
#
# Необходимо распределить 450 мест между партиями, участвовавших в выборах.
# Сначала подсчитывается сумма голосов избирателей,
# поданных за каждую партию и подсчитывается сумма голосов, поданных за все партии.
# Эта сумма делится на 450, получается величина, называемая “первое избирательное частное”
# (смысл первого избирательного частного - это количество голосов избирателей,
# которое необходимо набрать для получения одного места в парламенте).
#
# Далее каждая партия получает столько мест в парламенте,
# чему равна целая часть от деления числа голосов за данную партию на первое избирательное частное.
#
# Если после первого раунда распределения мест сумма количества мест,
# отданных партиям, меньше 450, то оставшиеся места передаются по одному партиям,
# в порядке убывания дробной части частного от деления числа голосов за данную партию на первое избирательное частное.
# Если же для двух партий эти дробные части равны, то преимущество отдается той партии,
# которая получила большее число голосов.
#
# На вход программе подается список партий, участвовавших в выборах.
# Каждая строка входного файла содержит название партии (строка, возможно, содержащая пробелы),
# затем, через пробел, количество голосов, полученных данной партией – число, не превосходящее 108.
#
# Программа должна вывести названия всех партий и количество голосов в парламенте,
# полученных данной партией. Названия необходимо выводить в том же порядке, в котором они шли во входных данных.
#
# Ввод
# Party One 100000
# Party Two 200000
# Party Three 400000
#
#
# Вывод
# Party One 64
# Party Two 129
# Party Three 257